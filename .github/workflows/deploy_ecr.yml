name: "ECR and ECS Deploy"

concurrency:
  group: ecr-deploy-${{ github.ref_name }}
  cancel-in-progress: true

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  push:
    branches:
      - prod
      - dev

jobs:
  deploy-ecr:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    steps:
      - uses: actions/checkout@v3
      - name: Read .nvmrc
        id: node_version
        run: |
          echo ::set-output name=NODE_VERSION::$(cat .nvmrc | cut -c2-8)
          echo ::set-output name=NODE_VERSION_SHORT::$(cat .nvmrc | cut -c2-3)

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CI_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CI_SECRET_ACCESS_KEY }}
          role-skip-session-tagging: true
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/DeploymentRole
          role-duration-seconds: 1800
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Docker build
        id: build-image
        uses: docker/build-push-action@v4
        with:
          push: true
          build-args: |
            NODE_VERSION=${{ steps.node_version.outputs.NODE_VERSION }}
            NODE_VERSION_SHORT=${{ steps.node_version.outputs.NODE_VERSION_SHORT }}
          tags: |
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/payment-service-${{ github.ref_name }}-ecr:latest
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/payment-service-${{ github.ref_name }}-ecr:${{ github.sha }}

      - name: Scan Image for Vulnerabilities
        id: scan-image
        # Check for critical vulnerabilities
        env:
          RETRY_DELAY_SECONDS: 5 # 5 seconds
          MAX_ATTEMPTS: 60 # 5sec * 60 attempts = 5min total wait time
        run: |
          attempts=0
          status="IN_PROGRESS"
          while [ "IN_PROGRESS" == "$status" ]; do
              if [ $attempts -gt $MAX_ATTEMPTS ]; then
                echo "Max time limit reached. Exiting deployment."
                exit 1
              fi
              sleep $RETRY_DELAY_SECONDS
              findings=$(aws ecr describe-image-scan-findings --repository-name payment-service-${{github.ref_name}}-ecr --image-id imageTag=${{ github.sha }} | jq '.')
              status=$(echo $findings | jq -r '.imageScanStatus.status' )
              attempts=$((attempts+1))
              echo "Scanning is ${status}... Attempt ${attempts}"
          done
          critical=$(echo $findings | jq '.imageScanFindings.findingSeverityCounts.CRITICAL // 0') 
          high=$(echo $findings | jq '.imageScanFindings.findingSeverityCounts.HIGH // 0') 
          if  [ $critical -gt 0 ] || [ $high -gt 0 ]; then
            echo "Critical or high vulnerabilities found in image that MUST be resolved before being deployed!"
            echo $findings
            exit 1
          fi
          echo "No critical or high vulnerabilities found!"
          echo $findings

  deploy:
    name: Deploy
    needs:
      - deploy-ecr
    uses: ./.github/workflows/deploy_to_env.yml
    with:
      SERVICE_NAME: payment-service-${{ github.ref_name }}
      CONTAINER_NAME: payment-service-task-definition-${{ github.ref_name }}
      CLUSTER_NAME: payment-service-cluster-${{ github.ref_name }}
      IMAGE_NAME: payment-service-${{ github.ref_name }}-ecr:${{ github.sha }}
      ENVIRONMENT: ${{ github.ref_name }}
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID_INFRA: ${{ secrets.AWS_ACCOUNT_ID_INFRA }}
      AWS_ACCESS_KEY_ID: ${{ secrets.CI_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.CI_SECRET_ACCESS_KEY }}
